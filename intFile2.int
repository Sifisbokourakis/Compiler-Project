1: begin_block fibonacci _ _
2: <= x 1 4
3: jump _ _ 6
4: := x _ fibonacci
5: jump _ _ 16
6: - x 1 T$1
7: par T$1 CV _
8: par T$2 RET _
9: call fibonacci _ _
10: - x 2 T$3
11: par T$3 CV _
12: par T$4 RET _
13: call fibonacci _ _
14: + fibonacci fibonacci T$5
15: := T$5 _ fibonacci
16: end_block fibonacci _ _
17: begin_block divides _ _
18: / y x T$6
19: * T$6 x T$7
20: = y T$7 22
21: jump _ _ 24
22: := 1 _ z
23: jump _ _ 25
24: := 0 _ z
25: end_block divides _ _
26: begin_block isPrime _ _
27: := 1 _ isPrime
28: := 2 _ i
29: < i k 31
30: jump _ _ 42
31: par i CV _
32: par k CV _
33: par t REF _
34: call divides _ _
35: = t 1 37
36: jump _ _ 39
37: := 0 _ isPrime
38: jump _ _ 39
39: + i 1 T$8
40: := T$8 _ i
41: jump _ _ 29
42: end_block isPrime _ _
43: begin_block τεστ _ _
44: inp x _ _
45: par x CV _
46: par T$9 RET _
47: call fibonacci _ _
48: out fibonacci _ _
49: := 2 _ i
50: <= i 30 52
51: jump _ _ 62
52: par i CV _
53: par T$10 RET _
54: call isPrime _ _
55: = isPrime 1 57
56: jump _ _ 59
57: out i _ _
58: jump _ _ 59
59: + i 1 T$11
60: := T$11 _ i
61: jump _ _ 50
62: halt _ _ _
63: end_block τεστ _ _
